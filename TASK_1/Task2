// IceCreamFlavor.java
package icecreamshop;

public enum IceCreamFlavor {
    MINT_CHOCOLATE_CHIP(2.80),
    CHOCOLATE_FUDGE(3.00),
    STRAWBERRY_SWIRL(2.75),
    PISTACHIO_DELIGHT(3.25);

    private final double pricePerScoop;

    IceCreamFlavor(double pricePerScoop) {
        this.pricePerScoop = pricePerScoop;
    }

    public double getPricePerScoop() {
        return pricePerScoop;
    }
}

// Topping.java
package icecreamshop;

public enum Topping {
    SPRINKLES(0.30),
    MARSHMALLOW(0.70),
    CRUSHED_OREO(0.85),
    FRESH_STRAWBERRIES(1.00),
    CHOCOLATE_CHIPS(0.50);

    private final double price;

    Topping(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }
}

// Container.java
package icecreamshop;

public enum Container {
    PAPER_CUP(0.00),
    WAFFLE_CONE(5.00);

    private final double price;

    Container(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }
}

// OrderItem.java
package icecreamshop;

public class OrderItem {
    private final IceCreamFlavor flavor;
    private final int scoops;

    public OrderItem(IceCreamFlavor flavor, int scoops) {
        if (scoops <= 0) {
            throw new IllegalArgumentException("Number of scoops must be positive");
        }
        this.flavor = flavor;
        this.scoops = scoops;
    }

    public double getPrice() {
        return flavor.getPricePerScoop() * scoops;
    }

    public IceCreamFlavor getFlavor() {
        return flavor;
    }

    public int getScoops() {
        return scoops;
    }
}

// ToppingItem.java
package icecreamshop;

public class ToppingItem {
    private final Topping topping;
    private final int quantity;

    public ToppingItem(Topping topping, int quantity) {
        if (quantity <= 0) {
            throw new IllegalArgumentException("Topping quantity must be positive");
        }
        this.topping = topping;
        this.quantity = quantity;
    }

    public double getPrice() {
        return topping.getPrice() * quantity;
    }

    public Topping getTopping() {
        return topping;
    }

    public int getQuantity() {
        return quantity;
    }
}

// PriceCalculator.java
package icecreamshop;

public class PriceCalculator {
    private static final double TAX_RATE = 0.08;

    public double calculateSubtotal(Order order) {
        double subtotal = order.getContainer().getPrice();

        for (OrderItem item : order.getIceCreamItems()) {
            subtotal += item.getPrice();
        }

        for (ToppingItem topping : order.getToppingItems()) {
            subtotal += topping.getPrice();
        }

        return subtotal;
    }

    public double calculateTax(double subtotal) {
        return subtotal * TAX_RATE;
    }

    public double calculateTotal(double subtotal, double tax) {
        return subtotal + tax;
    }
}

// Order.java
package icecreamshop;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Order {
    private final List<OrderItem> iceCreamItems;
    private final List<ToppingItem> toppingItems;
    private final Container container;

    public Order(Container container) {
        this.container = container;
        this.iceCreamItems = new ArrayList<>();
        this.toppingItems = new ArrayList<>();
    }

    public void addIceCream(IceCreamFlavor flavor, int scoops) {
        iceCreamItems.add(new OrderItem(flavor, scoops));
    }

    public void addTopping(Topping topping, int quantity) {
        toppingItems.add(new ToppingItem(topping, quantity));
    }

    public List<OrderItem> getIceCreamItems() {
        return Collections.unmodifiableList(iceCreamItems);
    }

    public List<ToppingItem> getToppingItems() {
        return Collections.unmodifiableList(toppingItems);
    }

    public Container getContainer() {
        return container;
    }
}

// InvoiceGenerator.java
package icecreamshop;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;

public class InvoiceGenerator {
    private final PriceCalculator priceCalculator;
    private static final DecimalFormat PRICE_FORMAT = new DecimalFormat("$#,##0.00");

    public InvoiceGenerator(PriceCalculator priceCalculator) {
        this.priceCalculator = priceCalculator;
    }

    public void generateInvoice(Order order, String filename) throws IOException {
        double subtotal = priceCalculator.calculateSubtotal(order);
        double tax = priceCalculator.calculateTax(subtotal);
        double total = priceCalculator.calculateTotal(subtotal, tax);

        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {
            writer.println("Ice Cream Shop Invoice");
            writer.println("--------------------");

            if (order.getContainer() == Container.WAFFLE_CONE) {
                writer.printf("Waffle Cone: %s%n", PRICE_FORMAT.format(order.getContainer().getPrice()));
            }

            for (OrderItem item : order.getIceCreamItems()) {
                writer.printf("%s - %d scoop(s): %s%n",
                    formatEnumName(item.getFlavor().name()),
                    item.getScoops(),
                    PRICE_FORMAT.format(item.getPrice()));
            }

            for (ToppingItem item : order.getToppingItems()) {
                writer.printf("%s - %d time(s): %s%n",
                    formatEnumName(item.getTopping().name()),
                    item.getQuantity(),
                    PRICE_FORMAT.format(item.getPrice()));
            }

            writer.println("--------------------");
            writer.printf("Subtotal: %s%n", PRICE_FORMAT.format(subtotal));
            writer.printf("Tax: %s%n", PRICE_FORMAT.format(tax));
            writer.printf("Total Amount Due: %s%n", PRICE_FORMAT.format(total));
        }
    }

    private String formatEnumName(String name) {
        return name.replace('_', ' ').toLowerCase();
    }
}

// Test cases
package icecreamshop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class IceCreamShopTest {
    private final PriceCalculator calculator = new PriceCalculator();

    @Test
    public void testBasicOrderCalculation() {
        Order order = new Order(Container.PAPER_CUP);
        order.addIceCream(IceCreamFlavor.CHOCOLATE_FUDGE, 1);
        order.addTopping(Topping.SPRINKLES, 1);

        double subtotal = calculator.calculateSubtotal(order);
        assertEquals(3.30, subtotal, 0.01); // $3.00 + $0.30
    }

    @Test
    public void testWaffleConeOrder() {
        Order order = new Order(Container.WAFFLE_CONE);
        order.addIceCream(IceCreamFlavor.MINT_CHOCOLATE_CHIP, 2);

        double subtotal = calculator.calculateSubtotal(order);
        assertEquals(10.60, subtotal, 0.01); // $5.00 + (2 * $2.80)
    }

    @Test
    public void testMultipleToppings() {
        Order order = new Order(Container.PAPER_CUP);
        order.addIceCream(IceCreamFlavor.PISTACHIO_DELIGHT, 1);
        order.addTopping(Topping.CHOCOLATE_CHIPS, 1);
        order.addTopping(Topping.FRESH_STRAWBERRIES, 2);

        double subtotal = calculator.calculateSubtotal(order);
        assertEquals(5.75, subtotal, 0.01); // $3.25 + $0.50 + (2 * $1.00)
    }

    @Test
    public void testTaxCalculation() {
        Order order = new Order(Container.PAPER_CUP);
        order.addIceCream(IceCreamFlavor.STRAWBERRY_SWIRL, 1);

        double subtotal = calculator.calculateSubtotal(order);
        double tax = calculator.calculateTax(subtotal);

        assertEquals(0.22, tax, 0.01); // $2.75 * 0.08
    }

    @Test
    public void testInvalidScoopCount() {
        assertThrows(IllegalArgumentException.class, () -> {
            new OrderItem(IceCreamFlavor.CHOCOLATE_FUDGE, 0);
        });
    }
}